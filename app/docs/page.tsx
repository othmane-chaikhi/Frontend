'use client';

import { useState } from 'react';
import { 
  FiBook, FiCode, FiTool, FiZap, FiCheckCircle, 
  FiAlertCircle, FiLayers, FiServer, FiMonitor, FiHeart, FiUsers, FiTarget
} from 'react-icons/fi';
import { generateMetadata, pageSEO } from '@/lib/seo';

// SEO metadata for docs page
export const metadata = generateMetadata({
  title: pageSEO.docs.title,
  description: pageSEO.docs.description,
  keywords: pageSEO.docs.keywords,
  url: '/docs',
});

type Language = 'fr' | 'en' | 'ar';

const content = {
  fr: {
    title: " Documentation",
    subtitle: "Guide complet du portfolio",
    
    nav: {
      overview: "Vue d'ensemble",
      about: "Mon Histoire",
      dynamic: "Gestion Dynamique",
      technologies: "Technologies",
      features: "Fonctionnalit√©s",
      problems: "Probl√®mes & Solutions",
      usage: "Utilisation",
      api: "API Reference"
    },
    
    overview: {
      title: "Vue d'ensemble du projet",
      description: "Plateforme compl√®te combinant un portfolio personnel, un blog technique et une acad√©mie d'apprentissage interactif.",
      stats: [
        { label: "Technologies", value: "15+", icon: <FiLayers /> },
        { label: "Fonctionnalit√©s", value: "50+", icon: <FiZap /> },
        { label: "Langages support√©s", value: "7+", icon: <FiCode /> },
      ]
    },
    
    about: {
      title: "Mon Histoire & Vision",
      subtitle: "Pourquoi j'ai cr√©√© cette plateforme",
      mission: {
        title: "Ma Mission",
        description: "Cette plateforme repr√©sente bien plus qu'un simple portfolio technique. C'est le r√©sultat d'une vision : cr√©er un espace o√π le personal branding rencontre l'√©ducation accessible.",
        goals: [
          {
            icon: <FiTarget />,
            title: "Personal Branding",
            desc: "Construire une pr√©sence professionnelle solide et authentique qui refl√®te mes comp√©tences et ma passion pour le d√©veloppement."
          },
          {
            icon: <FiUsers />,
            title: "Aider √† Apprendre",
            desc: "Rendre l'apprentissage de la programmation accessible √† tous, avec des exercices interactifs et une validation intelligente."
          },
          {
            icon: <FiHeart />,
            title: "Faciliter le Parcours",
            desc: "Cr√©er une exp√©rience d'apprentissage fluide et motivante, o√π chaque √©tape apporte satisfaction et progression visible."
          }
        ]
      },
      story: {
        title: "L'Histoire de ce Projet",
        paragraphs: [
          "Ce projet est n√© d'une passion pour le d√©veloppement web et d'un d√©sir profond de partager mes connaissances. En tant que d√©veloppeur, j'ai constat√© que l'apprentissage de la programmation peut √™tre difficile sans les bons outils et le bon accompagnement.",
          "J'ai voulu cr√©er une plateforme qui combine trois √©l√©ments essentiels : un portfolio pour pr√©senter mon travail et mes comp√©tences, un blog pour partager mes exp√©riences et d√©couvertes techniques, et surtout une acad√©mie interactive pour aider les autres √† apprendre.",
          "L'Academy n'est pas qu'une simple collection d'exercices. C'est un environnement d'apprentissage intelligent qui utilise Judge0 pour l'ex√©cution r√©elle du code et Gemini AI pour fournir des retours personnalis√©s. Chaque exercice est pens√© pour progresser naturellement, avec un syst√®me de points et de feedback constructif."
        ]
      },
      values: {
        title: "Mes Valeurs",
        items: [
          " Excellence technique - Utiliser les meilleures technologies disponibles",
          " Partage de connaissances - Rendre l'apprentissage accessible √† tous",
          " Innovation - Int√©grer des outils modernes comme Judge0 et Gemini AI",
          " Communaut√© - Cr√©er un espace d'apprentissage bienveillant",
          " Progression continue - Toujours am√©liorer et ajouter de nouvelles fonctionnalit√©s"
        ]
      },
      impact: {
        title: "L'Impact Vis√©",
        description: "Mon objectif est d'aider les apprenants √† :",
        points: [
          "Pratiquer la programmation avec des exercices concrets",
          "Recevoir des retours imm√©diats et constructifs",
          "Progresser √† leur rythme avec un syst√®me de points motivant",
          "Acc√©der √† une plateforme gratuite et de qualit√©",
          "D√©velopper leurs comp√©tences dans plusieurs langages (Python, JavaScript, C++, Java, SQL...)"
        ]
      }
    },
    
    dynamic: {
      title: " Gestion 100% Dynamique",
      subtitle: "Tout est configurable depuis le Dashboard Admin",
      intro: "Cette plateforme est enti√®rement dynamique. Chaque texte, chaque comp√©tence, chaque cours peut √™tre modifi√© directement depuis l'interface d'administration, sans toucher une seule ligne de code !",
      sections: [
        {
          title: " Contenu Textuel",
          icon: "üìù",
          features: [
            "Tous les textes de la page d'accueil sont modifiables",
            "Descriptions, titres, sous-titres personnalisables",
            "Liens sociaux (GitHub, LinkedIn) configurables",
            "Email de contact modifiable",
            "CV uploadable et rempla√ßable √† tout moment"
          ]
        },
        {
          title: " Comp√©tences (Skills)",
          icon: "",
          features: [
            "Ajouter/modifier/supprimer des comp√©tences depuis l'admin",
            "Pourcentages de ma√Ætrise ajustables",
            "Ordre des comp√©tences modifiable",
            "Cat√©gories personnalisables",
            "Affichage automatique avec barres de progression"
          ]
        },
        {
          title: "Blog",
          icon: "",
          features: [
            "Cr√©er des articles avec √©diteur riche",
            "Upload d'images et vid√©os (YouTube)",
            "Gestion des commentaires",
            "Publier/d√©publier des articles",
            "Recherche et filtrage int√©gr√©s"
          ]
        },
        {
          title: " Academy",
          icon: "",
          features: [
            "Cr√©er des cours complets depuis le dashboard",
            "Ajouter des vid√©os YouTube facilement",
            "Cr√©er des exercices de code avec Monaco Editor",
            "Configurer la difficult√© et les points",
            "R√©organiser l'ordre des le√ßons (drag & drop)",
            "Support multi-langages (Python, JS, C++, Java, SQL...)"
          ]
        },
        {
          title: " M√©dias",
          icon: "",
          features: [
            "Upload d'images avec compression automatique",
            "Gestion des avatars",
            "Galerie de m√©dias organis√©e",
            "Support GIF, PNG, JPEG",
            "Int√©gration vid√©os YouTube"
          ]
        }
      ],
      advantages: {
        title: " Avantages de la Gestion Dynamique",
        items: [
          {
            title: "Aucun code requis",
            desc: "Modifiez tout depuis l'interface admin. Pas besoin de conna√Ætre React ou Django !"
          },
          {
            title: "Mises √† jour instantan√©es",
            desc: "Les changements sont visibles imm√©diatement apr√®s sauvegarde"
          },
          {
            title: "Multi-utilisateurs",
            desc: "Plusieurs admins peuvent g√©rer le contenu simultan√©ment"
          },
          {
            title: "Historique des modifications",
            desc: "Django garde une trace de toutes les modifications"
          },
          {
            title: "Validation automatique",
            desc: "Les formulaires v√©rifient automatiquement la validit√© des donn√©es"
          },
          {
            title: "Pr√©visualisation",
            desc: "Voyez vos changements avant de les publier"
          }
        ]
      },
      howto: {
        title: " Comment utiliser l'Admin Dashboard",
        steps: [
          "1. Connectez-vous √† : http://localhost:3000/admin (ou votresite.com/admin)",
          "2. Utilisez vos identifiants staff",
          "3. Naviguez entre les sections : Posts, Courses, Videos, Exercises, Settings",
          "4. Cliquez sur 'Ajouter' pour cr√©er du nouveau contenu",
          "5. Remplissez les formulaires (tous les champs sont expliqu√©s)",
          "6. Cliquez sur 'Sauvegarder'",
          "7. Retournez sur le site public pour voir vos changements !"
        ]
      }
    },
    
    technologies: {
      title: " Technologies utilis√©es",
      backend: {
        title: "Backend",
        items: [
          { name: "Django 5.2.7", desc: "Framework Python principal" },
          { name: "Django REST Framework", desc: "API RESTful" },
          { name: "MySQL", desc: "Base de donn√©es relationnelle" },
          { name: "Judge0 API", desc: "Ex√©cution de code en temps r√©el" },
          { name: "Google Gemini AI", desc: "Validation intelligente du code" },
          { name: "Pillow", desc: "Traitement d'images" },
        ]
      },
      frontend: {
        title: "Frontend",
        items: [
          { name: "Next.js 14", desc: "Framework React avec App Router" },
          { name: "TypeScript", desc: "JavaScript typ√©" },
          { name: "Tailwind CSS", desc: "Framework CSS utility-first" },
          { name: "Monaco Editor", desc: "√âditeur de code VS Code" },
          { name: "Axios", desc: "Client HTTP" },
          { name: "React Icons", desc: "Biblioth√®que d'ic√¥nes" },
        ]
      }
    },
    
    features: {
      title: " Fonctionnalit√©s principales",
      portfolio: {
        title: "Portfolio",
        items: [
          "Page d'accueil avec pr√©sentation",
          "Comp√©tences avec barres de progression",
          "T√©l√©chargement de CV",
          "Liens sociaux (GitHub, LinkedIn)",
          "Design responsive et dark mode"
        ]
      },
      blog: {
        title: "Blog",
        items: [
          "Articles avec images/vid√©os",
          "Syst√®me de commentaires",
          "Recherche d'articles",
          "Pagination",
          "Admin dashboard pour g√©rer les posts"
        ]
      },
      academy: {
        title: "Academy",
        items: [
          "Cours interactifs multi-langages",
          "Exercices de code avec Monaco Editor",
          "Ex√©cution en temps r√©el (Judge0)",
          "Validation IA (Gemini)",
          "Syst√®me de progression et points",
          "Support Python, JS, C++, Java, SQL, C",
          "Terminal int√©gr√© avec output"
        ]
      }
    },
    
    problems: {
      title: "‚ö†Ô∏è Probl√®mes rencontr√©s & Solutions",
      items: [
        {
          problem: "Erreur Judge0 500",
          solution: "Gestion des valeurs null dans stdout/stderr avec (result.get('stdout') or '').strip()",
          file: "backend/apps/portfolio/services/judge0_service.py"
        },
        {
          problem: "Pyodide SyntaxError: Unexpected token '<'",
          solution: "Chargement de Pyodide dans useEffect au lieu du composant Script",
          file: "frontend/app/academy/courses/[id]/exercise/[itemId]/page.tsx"
        },
        {
          problem: "Double /api/ dans les URLs",
          solution: "Correction des endpoints de ${API_BASE_URL}/api/ √† ${API_BASE_URL}/",
          file: "frontend/lib/api.ts"
        },
        {
          problem: "Validation trop permissive",
          solution: "Int√©gration de Gemini AI pour validation intelligente + Judge0 pour ex√©cution r√©elle",
          file: "backend/apps/portfolio/views.py"
        },
        {
          problem: "CRUD courses depuis Django Admin",
          solution: "Cr√©ation de pages frontend d√©di√©es pour g√©rer courses/videos/exercises",
          file: "frontend/app/admin/academy/"
        },
        {
          problem: "Monaco Editor TypeScript errors",
          solution: "Import dynamique avec SSR d√©sactiv√© et typage explicite des handlers",
          file: "frontend/app/academy/courses/[id]/exercise/[itemId]/page.tsx"
        },
        {
          problem: "Exercices d√©j√† compl√©t√©s re-valid√©s",
          solution: "Ajout de flags already_completed et current_answer_incorrect dans l'API",
          file: "backend/apps/portfolio/views.py - AcademyExerciseViewSet"
        }
      ]
    },
    
    usage: {
      title: " Guide d'utilisation",
      installation: {
        title: "Installation",
        steps: [
          "Cloner le repository",
          "Cr√©er l'environnement virtuel: python -m venv venv",
          "Activer: .\\venv\\Scripts\\activate (Windows)",
          "Installer backend: pip install -r requirements.txt",
          "Installer frontend: cd frontend && npm install",
          "Migrations: python manage.py migrate",
          "Cr√©er superuser: python manage.py createsuperuser",
          "Lancer: .\\RECONSTRUIRE_TOUT.bat"
        ]
      },
      development: {
        title: "D√©veloppement",
        steps: [
          "Backend: cd backend && python manage.py runserver",
          "Frontend: cd frontend && npm run dev",
          "Acc√©der: http://localhost:3000",
          "Admin: http://localhost:3000/admin",
          "API: http://localhost:8000/api"
        ]
      },
      gemini: {
        title: "Configuration Gemini AI",
        steps: [
          "Obtenir cl√© API: https://makersuite.google.com/app/apikey",
          "Windows: set GEMINI_API_KEY=votre_cl√©",
          "Linux/Mac: export GEMINI_API_KEY=votre_cl√©",
          "Red√©marrer le backend"
        ]
      }
    },
    
    api: {
      title: " API Reference",
      endpoints: [
        { method: "GET", path: "/api/posts/", desc: "Liste des articles" },
        { method: "POST", path: "/api/posts/", desc: "Cr√©er un article (staff only)" },
        { method: "GET", path: "/api/posts/{id}/", desc: "D√©tail d'un article" },
        { method: "GET", path: "/academy/courses/", desc: "Liste des cours" },
        { method: "POST", path: "/academy/courses/", desc: "Cr√©er un cours (staff only)" },
        { method: "GET", path: "/academy/exercises/{id}/", desc: "D√©tail d'un exercice" },
        { method: "POST", path: "/academy/exercises/{id}/execute/", desc: "Ex√©cuter du code (Judge0)" },
        { method: "POST", path: "/academy/exercises/{id}/submit/", desc: "Soumettre solution (Gemini)" },
        { method: "GET", path: "/academy/exercises/{id}/solution/", desc: "Voir la solution" },
        { method: "GET", path: "/academy/progress/", desc: "Progression utilisateur" },
      ]
    }
  },
  
  en: {
    title: " Documentation",
    subtitle: "Complete Portfolio Guide",
    
    nav: {
      overview: "Overview",
      about: "My Story",
      dynamic: "Dynamic Management",
      technologies: "Technologies",
      features: "Features",
      problems: "Problems & Solutions",
      usage: "Usage",
      api: "API Reference"
    },
    
    overview: {
      title: "Project Overview",
      description: "Complete platform combining a personal portfolio, technical blog, and interactive learning academy.",
      stats: [
        { label: "Technologies", value: "15+", icon: <FiLayers /> },
        { label: "Features", value: "50+", icon: <FiZap /> },
        { label: "Supported Languages", value: "7+", icon: <FiCode /> },
      ]
    },
    
    about: {
      title: "My Story & Vision",
      subtitle: "Why I created this platform",
      mission: {
        title: "My Mission",
        description: "This platform represents much more than a simple technical portfolio. It's the result of a vision: creating a space where personal branding meets accessible education.",
        goals: [
          {
            icon: <FiTarget />,
            title: "Personal Branding",
            desc: "Build a strong and authentic professional presence that reflects my skills and passion for development."
          },
          {
            icon: <FiUsers />,
            title: "Help People Learn",
            desc: "Make programming accessible to everyone, with interactive exercises and intelligent validation."
          },
          {
            icon: <FiHeart />,
            title: "Facilitate Learning Journey",
            desc: "Create a smooth and motivating learning experience, where each step brings satisfaction and visible progress."
          }
        ]
      },
      story: {
        title: "The Story Behind This Project",
        paragraphs: [
          "This project was born from a passion for web development and a deep desire to share my knowledge. As a developer, I've seen that learning programming can be difficult without the right tools and guidance.",
          "I wanted to create a platform that combines three essential elements: a portfolio to showcase my work and skills, a blog to share my experiences and technical discoveries, and most importantly an interactive academy to help others learn.",
          "The Academy is not just a simple collection of exercises. It's an intelligent learning environment that uses Judge0 for real code execution and Gemini AI to provide personalized feedback. Each exercise is designed to progress naturally, with a points system and constructive feedback."
        ]
      },
      values: {
        title: "My Values",
        items: [
          " Technical Excellence - Use the best available technologies",
          " Knowledge Sharing - Make learning accessible to all",
          " Innovation - Integrate modern tools like Judge0 and Gemini AI",
          " Community - Create a supportive learning space",
          " Continuous Progress - Always improve and add new features"
        ]
      },
      impact: {
        title: "The Intended Impact",
        description: "My goal is to help learners to:",
        points: [
          "Practice programming with concrete exercises",
          "Receive immediate and constructive feedback",
          "Progress at their own pace with a motivating points system",
          "Access a free and quality platform",
          "Develop skills in multiple languages (Python, JavaScript, C++, Java, SQL...)"
        ]
      }
    },
    
    technologies: {
      title: " Technologies Used",
      backend: {
        title: "Backend",
        items: [
          { name: "Django 5.2.7", desc: "Main Python framework" },
          { name: "Django REST Framework", desc: "RESTful API" },
          { name: "MySQL", desc: "Relational database" },
          { name: "Judge0 API", desc: "Real-time code execution" },
          { name: "Google Gemini AI", desc: "Intelligent code validation" },
          { name: "Pillow", desc: "Image processing" },
        ]
      },
      frontend: {
        title: "Frontend",
        items: [
          { name: "Next.js 14", desc: "React framework with App Router" },
          { name: "TypeScript", desc: "Typed JavaScript" },
          { name: "Tailwind CSS", desc: "Utility-first CSS framework" },
          { name: "Monaco Editor", desc: "VS Code editor" },
          { name: "Axios", desc: "HTTP client" },
          { name: "React Icons", desc: "Icon library" },
        ]
      }
    },
    
    features: {
      title: " Main Features",
      portfolio: {
        title: "Portfolio",
        items: [
          "Homepage with presentation",
          "Skills with progress bars",
          "CV download",
          "Social links (GitHub, LinkedIn)",
          "Responsive design and dark mode"
        ]
      },
      blog: {
        title: "Blog",
        items: [
          "Articles with images/videos",
          "Comment system",
          "Article search",
          "Pagination",
          "Admin dashboard to manage posts"
        ]
      },
      academy: {
        title: "Academy",
        items: [
          "Interactive multi-language courses",
          "Code exercises with Monaco Editor",
          "Real-time execution (Judge0)",
          "AI validation (Gemini)",
          "Progress and points system",
          "Support Python, JS, C++, Java, SQL, C",
          "Integrated terminal with output"
        ]
      }
    },
    
    problems: {
      title: "‚ö†Ô∏è Problems Encountered & Solutions",
      items: [
        {
          problem: "Judge0 500 Error",
          solution: "Handle null values in stdout/stderr with (result.get('stdout') or '').strip()",
          file: "backend/apps/portfolio/services/judge0_service.py"
        },
        {
          problem: "Pyodide SyntaxError: Unexpected token '<'",
          solution: "Load Pyodide in useEffect instead of Script component",
          file: "frontend/app/academy/courses/[id]/exercise/[itemId]/page.tsx"
        },
        {
          problem: "Double /api/ in URLs",
          solution: "Fix endpoints from ${API_BASE_URL}/api/ to ${API_BASE_URL}/",
          file: "frontend/lib/api.ts"
        },
        {
          problem: "Too permissive validation",
          solution: "Integrate Gemini AI for intelligent validation + Judge0 for real execution",
          file: "backend/apps/portfolio/views.py"
        },
        {
          problem: "CRUD courses from Django Admin",
          solution: "Create dedicated frontend pages to manage courses/videos/exercises",
          file: "frontend/app/admin/academy/"
        },
        {
          problem: "Monaco Editor TypeScript errors",
          solution: "Dynamic import with SSR disabled and explicit handler typing",
          file: "frontend/app/academy/courses/[id]/exercise/[itemId]/page.tsx"
        },
        {
          problem: "Already completed exercises re-validated",
          solution: "Add already_completed and current_answer_incorrect flags in API",
          file: "backend/apps/portfolio/views.py - AcademyExerciseViewSet"
        }
      ]
    },
    
    usage: {
      title: " Usage Guide",
      installation: {
        title: "Installation",
        steps: [
          "Clone repository",
          "Create virtual environment: python -m venv venv",
          "Activate: .\\venv\\Scripts\\activate (Windows)",
          "Install backend: pip install -r requirements.txt",
          "Install frontend: cd frontend && npm install",
          "Migrations: python manage.py migrate",
          "Create superuser: python manage.py createsuperuser",
          "Launch: .\\RECONSTRUIRE_TOUT.bat"
        ]
      },
      development: {
        title: "Development",
        steps: [
          "Backend: cd backend && python manage.py runserver",
          "Frontend: cd frontend && npm run dev",
          "Access: http://localhost:3000",
          "Admin: http://localhost:3000/admin",
          "API: http://localhost:8000/api"
        ]
      },
      gemini: {
        title: "Gemini AI Configuration",
        steps: [
          "Get API key: https://makersuite.google.com/app/apikey",
          "Windows: set GEMINI_API_KEY=your_key",
          "Linux/Mac: export GEMINI_API_KEY=your_key",
          "Restart backend"
        ]
      }
    },
    
    api: {
      title: " API Reference",
      endpoints: [
        { method: "GET", path: "/api/posts/", desc: "List articles" },
        { method: "POST", path: "/api/posts/", desc: "Create article (staff only)" },
        { method: "GET", path: "/api/posts/{id}/", desc: "Article detail" },
        { method: "GET", path: "/academy/courses/", desc: "List courses" },
        { method: "POST", path: "/academy/courses/", desc: "Create course (staff only)" },
        { method: "GET", path: "/academy/exercises/{id}/", desc: "Exercise detail" },
        { method: "POST", path: "/academy/exercises/{id}/execute/", desc: "Execute code (Judge0)" },
        { method: "POST", path: "/academy/exercises/{id}/submit/", desc: "Submit solution (Gemini)" },
        { method: "GET", path: "/academy/exercises/{id}/solution/", desc: "View solution" },
        { method: "GET", path: "/academy/progress/", desc: "User progress" },
      ]
    }
  },
  
  ar: {
    title: " ÿßŸÑÿ™Ÿàÿ´ŸäŸÇ",
    subtitle: "ÿØŸÑŸäŸÑ ÿ¥ÿßŸÖŸÑ ŸÑŸÑŸÖÿ≠ŸÅÿ∏ÿ©",
    
    nav: {
      overview: "ŸÜÿ∏ÿ±ÿ© ÿπÿßŸÖÿ©",
      about: "ŸÇÿµÿ™Ÿä",
      technologies: "ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™",
      features: "ÿßŸÑŸÖŸäÿ≤ÿßÿ™",
      problems: "ÿßŸÑŸÖÿ¥ÿßŸÉŸÑ ŸàÿßŸÑÿ≠ŸÑŸàŸÑ",
      usage: "ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ",
      api: "ŸÖÿ±ÿ¨ÿπ API"
    },
    
    overview: {
      title: "ŸÜÿ∏ÿ±ÿ© ÿπÿßŸÖÿ© ÿπŸÑŸâ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ",
      description: "ŸÖŸÜÿµÿ© ŸÉÿßŸÖŸÑÿ© ÿ™ÿ¨ŸÖÿπ ÿ®ŸäŸÜ ŸÖÿ≠ŸÅÿ∏ÿ© ÿ¥ÿÆÿµŸäÿ©ÿå ŸÖÿØŸàŸÜÿ© ÿ™ŸÇŸÜŸäÿ©ÿå Ÿàÿ£ŸÉÿßÿØŸäŸÖŸäÿ© ÿ™ÿπŸÑŸäŸÖŸäÿ© ÿ™ŸÅÿßÿπŸÑŸäÿ©.",
      stats: [
        { label: "ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™", value: "15+", icon: <FiLayers /> },
        { label: "ÿßŸÑŸÖŸäÿ≤ÿßÿ™", value: "50+", icon: <FiZap /> },
        { label: "ÿßŸÑŸÑÿ∫ÿßÿ™ ÿßŸÑŸÖÿØÿπŸàŸÖÿ©", value: "7+", icon: <FiCode /> },
      ]
    },
    
    about: {
      title: "ŸÇÿµÿ™Ÿä Ÿàÿ±ÿ§Ÿäÿ™Ÿä",
      subtitle: "ŸÑŸÖÿßÿ∞ÿß ÿ£ŸÜÿ¥ÿ£ÿ™ Ÿáÿ∞Ÿá ÿßŸÑŸÖŸÜÿµÿ©",
      mission: {
        title: "ŸÖŸáŸÖÿ™Ÿä",
        description: "ÿ™ŸÖÿ´ŸÑ Ÿáÿ∞Ÿá ÿßŸÑŸÖŸÜÿµÿ© ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ŸÖÿ¨ÿ±ÿØ ŸÖÿ≠ŸÅÿ∏ÿ© ÿ™ŸÇŸÜŸäÿ© ÿ®ÿ≥Ÿäÿ∑ÿ©. ÿ•ŸÜŸáÿß ŸÜÿ™Ÿäÿ¨ÿ© ÿ±ÿ§Ÿäÿ©: ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≥ÿßÿ≠ÿ© ŸäŸÑÿ™ŸÇŸä ŸÅŸäŸáÿß ÿßŸÑÿπŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ© ÿßŸÑÿ¥ÿÆÿµŸäÿ© ŸÖÿπ ÿßŸÑÿ™ÿπŸÑŸäŸÖ ÿßŸÑŸÖÿ™ÿßÿ≠ ŸÑŸÑÿ¨ŸÖŸäÿπ.",
        goals: [
          {
            icon: <FiTarget />,
            title: "ÿßŸÑÿπŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ© ÿßŸÑÿ¥ÿÆÿµŸäÿ©",
            desc: "ÿ®ŸÜÿßÿ° ÿ≠ÿ∂Ÿàÿ± ŸÖŸáŸÜŸä ŸÇŸàŸä Ÿàÿ£ÿµŸäŸÑ ŸäÿπŸÉÿ≥ ŸÖŸáÿßÿ±ÿßÿ™Ÿä Ÿàÿ¥ÿ∫ŸÅŸä ÿ®ÿßŸÑÿ™ÿ∑ŸàŸäÿ±."
          },
          {
            icon: <FiUsers />,
            title: "ŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑŸÜÿßÿ≥ ÿπŸÑŸâ ÿßŸÑÿ™ÿπŸÑŸÖ",
            desc: "ÿ¨ÿπŸÑ ÿ™ÿπŸÑŸÖ ÿßŸÑÿ®ÿ±ŸÖÿ¨ÿ© ŸÅŸä ŸÖÿ™ŸÜÿßŸàŸÑ ÿßŸÑÿ¨ŸÖŸäÿπÿå ŸÖÿπ ÿ™ŸÖÿßÿ±ŸäŸÜ ÿ™ŸÅÿßÿπŸÑŸäÿ© ŸàÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿßŸÑÿ∞ŸÉŸä."
          },
          {
            icon: <FiHeart />,
            title: "ÿ™ÿ≥ŸáŸäŸÑ ÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ™ÿπŸÑŸÖ",
            desc: "ÿÆŸÑŸÇ ÿ™ÿ¨ÿ±ÿ®ÿ© ÿ™ÿπŸÑŸÖ ÿ≥ŸÑÿ≥ÿ© ŸàŸÖÿ≠ŸÅÿ≤ÿ©ÿå ÿ≠Ÿäÿ´ ÿ™ÿ¨ŸÑÿ® ŸÉŸÑ ÿÆÿ∑Ÿàÿ© ÿßŸÑÿ±ÿ∂ÿß ŸàÿßŸÑÿ™ŸÇÿØŸÖ ÿßŸÑŸÖÿ±ÿ¶Ÿä."
          }
        ]
      },
      story: {
        title: "ÿßŸÑŸÇÿµÿ© Ÿàÿ±ÿßÿ° Ÿáÿ∞ÿß ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ",
        paragraphs: [
          "ŸàŸÑÿØ Ÿáÿ∞ÿß ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ ŸÖŸÜ ÿ¥ÿ∫ŸÅ ÿ®ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàŸäÿ® Ÿàÿ±ÿ∫ÿ®ÿ© ÿπŸÖŸäŸÇÿ© ŸÅŸä ŸÖÿ¥ÿßÿ±ŸÉÿ© ŸÖÿπÿ±ŸÅÿ™Ÿä. ŸÉŸÖÿ∑Ÿàÿ±ÿå ÿ±ÿ£Ÿäÿ™ ÿ£ŸÜ ÿ™ÿπŸÑŸÖ ÿßŸÑÿ®ÿ±ŸÖÿ¨ÿ© ŸäŸÖŸÉŸÜ ÿ£ŸÜ ŸäŸÉŸàŸÜ ÿµÿπÿ®Ÿãÿß ÿ®ÿØŸàŸÜ ÿßŸÑÿ£ÿØŸàÿßÿ™ ÿßŸÑÿµÿ≠Ÿäÿ≠ÿ© ŸàÿßŸÑÿ™Ÿàÿ¨ŸäŸá ÿßŸÑŸÖŸÜÿßÿ≥ÿ®.",
          "ÿ£ÿ±ÿØÿ™ ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÜÿµÿ© ÿ™ÿ¨ŸÖÿπ ÿ®ŸäŸÜ ÿ´ŸÑÿßÿ´ÿ© ÿπŸÜÿßÿµÿ± ÿ£ÿ≥ÿßÿ≥Ÿäÿ©: ŸÖÿ≠ŸÅÿ∏ÿ© ŸÑÿπÿ±ÿ∂ ÿπŸÖŸÑŸä ŸàŸÖŸáÿßÿ±ÿßÿ™Ÿäÿå ŸÖÿØŸàŸÜÿ© ŸÑŸÖÿ¥ÿßÿ±ŸÉÿ© ÿ™ÿ¨ÿßÿ±ÿ®Ÿä ŸàÿßŸÉÿ™ÿ¥ÿßŸÅÿßÿ™Ÿä ÿßŸÑÿ™ŸÇŸÜŸäÿ©ÿå ŸàÿßŸÑÿ£ŸáŸÖ ŸÖŸÜ ÿ∞ŸÑŸÉ ÿ£ŸÉÿßÿØŸäŸÖŸäÿ© ÿ™ŸÅÿßÿπŸÑŸäÿ© ŸÑŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑÿ¢ÿÆÿ±ŸäŸÜ ÿπŸÑŸâ ÿßŸÑÿ™ÿπŸÑŸÖ.",
          "ÿßŸÑÿ£ŸÉÿßÿØŸäŸÖŸäÿ© ŸÑŸäÿ≥ÿ™ ŸÖÿ¨ÿ±ÿØ ŸÖÿ¨ŸÖŸàÿπÿ© ÿ®ÿ≥Ÿäÿ∑ÿ© ŸÖŸÜ ÿßŸÑÿ™ŸÖÿßÿ±ŸäŸÜ. ÿ•ŸÜŸáÿß ÿ®Ÿäÿ¶ÿ© ÿ™ÿπŸÑŸÖ ÿ∞ŸÉŸäÿ© ÿ™ÿ≥ÿ™ÿÆÿØŸÖ Judge0 ŸÑÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑŸÉŸàÿØ ÿßŸÑÿ≠ŸÇŸäŸÇŸä Ÿà Gemini AI ŸÑÿ™ŸÇÿØŸäŸÖ ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ¥ÿÆÿµŸäÿ©. ŸÉŸÑ ÿ™ŸÖÿ±ŸäŸÜ ŸÖÿµŸÖŸÖ ŸÑŸÑÿ™ŸÇÿØŸÖ ÿ®ÿ¥ŸÉŸÑ ÿ∑ÿ®ŸäÿπŸäÿå ŸÖÿπ ŸÜÿ∏ÿßŸÖ ŸÜŸÇÿßÿ∑ ŸàŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ®ŸÜÿßÿ°ÿ©."
        ]
      },
      values: {
        title: "ŸÇŸäŸÖŸä",
        items: [
          " ÿßŸÑÿ™ŸÖŸäÿ≤ ÿßŸÑÿ™ŸÇŸÜŸä - ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÅÿ∂ŸÑ ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©",
          " ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿßŸÑŸÖÿπÿ±ŸÅÿ© - ÿ¨ÿπŸÑ ÿßŸÑÿ™ÿπŸÑŸÖ ŸÅŸä ŸÖÿ™ŸÜÿßŸàŸÑ ÿßŸÑÿ¨ŸÖŸäÿπ",
          " ÿßŸÑÿßÿ®ÿ™ŸÉÿßÿ± - ÿØŸÖÿ¨ ÿ£ÿØŸàÿßÿ™ ÿ≠ÿØŸäÿ´ÿ© ŸÖÿ´ŸÑ Judge0 Ÿà Gemini AI",
          " ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ - ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≥ÿßÿ≠ÿ© ÿ™ÿπŸÑŸÖ ÿØÿßÿπŸÖÿ©",
          " ÿßŸÑÿ™ŸÇÿØŸÖ ÿßŸÑŸÖÿ≥ÿ™ŸÖÿ± - ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿØÿßÿ¶ŸÖŸãÿß Ÿàÿ•ÿ∂ÿßŸÅÿ© ŸÖŸäÿ≤ÿßÿ™ ÿ¨ÿØŸäÿØÿ©"
        ]
      },
      impact: {
        title: "ÿßŸÑÿ™ÿ£ÿ´Ÿäÿ± ÿßŸÑŸÖŸÇÿµŸàÿØ",
        description: "ŸáÿØŸÅŸä ŸáŸà ŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑŸÖÿ™ÿπŸÑŸÖŸäŸÜ ÿπŸÑŸâ:",
        points: [
          "ŸÖŸÖÿßÿ±ÿ≥ÿ© ÿßŸÑÿ®ÿ±ŸÖÿ¨ÿ© ÿ®ÿ™ŸÖÿßÿ±ŸäŸÜ ŸÖŸÑŸÖŸàÿ≥ÿ©",
          "ÿ™ŸÑŸÇŸä ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ŸÅŸàÿ±Ÿäÿ© Ÿàÿ®ŸÜÿßÿ°ÿ©",
          "ÿßŸÑÿ™ŸÇÿØŸÖ ÿ®ÿßŸÑÿ≥ÿ±ÿπÿ© ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸáŸÖ ŸÖÿπ ŸÜÿ∏ÿßŸÖ ŸÜŸÇÿßÿ∑ ŸÖÿ≠ŸÅÿ≤",
          "ÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ŸÖŸÜÿµÿ© ŸÖÿ¨ÿßŸÜŸäÿ© ŸàÿπÿßŸÑŸäÿ© ÿßŸÑÿ¨ŸàÿØÿ©",
          "ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸÖŸáÿßÿ±ÿßÿ™ ŸÅŸä ŸÑÿ∫ÿßÿ™ ŸÖÿ™ÿπÿØÿØÿ© (Python, JavaScript, C++, Java, SQL...)"
        ]
      }
    },
    
    technologies: {
      title: " ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ©",
      backend: {
        title: "ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿÆŸÑŸÅŸäÿ©",
        items: [
          { name: "Django 5.2.7", desc: "ÿ•ÿ∑ÿßÿ± Python ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä" },
          { name: "Django REST Framework", desc: "Ÿàÿßÿ¨Ÿáÿ© ÿ®ÿ±ŸÖÿ¨ÿ© ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ RESTful" },
          { name: "MySQL", desc: "ŸÇÿßÿπÿØÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿπŸÑÿßÿ¶ŸÇŸäÿ©" },
          { name: "Judge0 API", desc: "ÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑŸÉŸàÿØ ŸÅŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÅÿπŸÑŸä" },
          { name: "Google Gemini AI", desc: "ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿßŸÑÿ∞ŸÉŸä ŸÖŸÜ ÿßŸÑŸÉŸàÿØ" },
          { name: "Pillow", desc: "ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿµŸàÿ±" },
        ]
      },
      frontend: {
        title: "ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©",
        items: [
          { name: "Next.js 14", desc: "ÿ•ÿ∑ÿßÿ± React ŸÖÿπ App Router" },
          { name: "TypeScript", desc: "JavaScript ŸÖÿπ ÿ£ŸÜŸàÿßÿπ" },
          { name: "Tailwind CSS", desc: "ÿ•ÿ∑ÿßÿ± CSS utility-first" },
          { name: "Monaco Editor", desc: "ŸÖÿ≠ÿ±ÿ± ÿ£ŸÉŸàÿßÿØ VS Code" },
          { name: "Axios", desc: "ÿπŸÖŸäŸÑ HTTP" },
          { name: "React Icons", desc: "ŸÖŸÉÿ™ÿ®ÿ© ÿ£ŸäŸÇŸàŸÜÿßÿ™" },
        ]
      }
    },
    
    features: {
      title: " ÿßŸÑŸÖŸäÿ≤ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©",
      portfolio: {
        title: "ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©",
        items: [
          "ÿµŸÅÿ≠ÿ© ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ŸÖÿπ ÿßŸÑÿ™ŸÇÿØŸäŸÖ",
          "ÿßŸÑŸÖŸáÿßÿ±ÿßÿ™ ŸÖÿπ ÿ£ÿ¥ÿ±ÿ∑ÿ© ÿßŸÑÿ™ŸÇÿØŸÖ",
          "ÿ™ŸÜÿ≤ŸäŸÑ ÿßŸÑÿ≥Ÿäÿ±ÿ© ÿßŸÑÿ∞ÿßÿ™Ÿäÿ©",
          "ÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑÿ™ŸàÿßÿµŸÑ ÿßŸÑÿßÿ¨ÿ™ŸÖÿßÿπŸä (GitHub, LinkedIn)",
          "ÿ™ÿµŸÖŸäŸÖ ŸÖÿ™ÿ¨ÿßŸàÿ® ŸàÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÑŸäŸÑŸä"
        ]
      },
      blog: {
        title: "ÿßŸÑŸÖÿØŸàŸÜÿ©",
        items: [
          "ŸÖŸÇÿßŸÑÿßÿ™ ŸÖÿπ ÿµŸàÿ±/ŸÅŸäÿØŸäŸàŸáÿßÿ™",
          "ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™",
          "ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸÇÿßŸÑÿßÿ™",
          "ÿßŸÑÿ™ÿ±ŸÇŸäŸÖ",
          "ŸÑŸàÿ≠ÿ© ÿ™ÿ≠ŸÉŸÖ ÿßŸÑÿ•ÿØÿßÿ±ÿ© ŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™"
        ]
      },
      academy: {
        title: "ÿßŸÑÿ£ŸÉÿßÿØŸäŸÖŸäÿ©",
        items: [
          "ÿØŸàÿ±ÿßÿ™ ÿ™ŸÅÿßÿπŸÑŸäÿ© ŸÖÿ™ÿπÿØÿØÿ© ÿßŸÑŸÑÿ∫ÿßÿ™",
          "ÿ™ŸÖÿßÿ±ŸäŸÜ ÿ®ÿ±ŸÖÿ¨Ÿäÿ© ŸÖÿπ Monaco Editor",
          "ÿßŸÑÿ™ŸÜŸÅŸäÿ∞ ŸÅŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÅÿπŸÑŸä (Judge0)",
          "ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ®ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä (Gemini)",
          "ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÇÿØŸÖ ŸàÿßŸÑŸÜŸÇÿßÿ∑",
          "ÿØÿπŸÖ Python, JS, C++, Java, SQL, C",
          "ÿ∑ÿ±ŸÅŸäÿ© ŸÖÿ™ŸÉÿßŸÖŸÑÿ© ŸÖÿπ ÿßŸÑŸÖÿÆÿ±ÿ¨ÿßÿ™"
        ]
      }
    },
    
    problems: {
      title: "‚ö†Ô∏è ÿßŸÑŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿ™Ÿä Ÿàÿßÿ¨ŸáŸÜÿßŸáÿß ŸàÿßŸÑÿ≠ŸÑŸàŸÑ",
      items: [
        {
          problem: "ÿÆÿ∑ÿ£ Judge0 500",
          solution: "ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑŸÇŸäŸÖ ÿßŸÑŸÅÿßÿ±ÿ∫ÿ© ŸÅŸä stdout/stderr ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ (result.get('stdout') or '').strip()",
          file: "backend/apps/portfolio/services/judge0_service.py"
        },
        {
          problem: "Pyodide SyntaxError: Unexpected token '<'",
          solution: "ÿ™ÿ≠ŸÖŸäŸÑ Pyodide ŸÅŸä useEffect ÿ®ÿØŸÑÿßŸã ŸÖŸÜ ŸÖŸÉŸàŸÜ Script",
          file: "frontend/app/academy/courses/[id]/exercise/[itemId]/page.tsx"
        },
        {
          problem: "ŸÖÿ∂ÿßÿπŸÅÿ© /api/ ŸÅŸä ÿπŸÜÿßŸàŸäŸÜ URL",
          solution: "ÿ™ÿµÿ≠Ÿäÿ≠ ŸÜŸÇÿßÿ∑ ÿßŸÑŸÜŸáÿßŸäÿ© ŸÖŸÜ ${API_BASE_URL}/api/ ÿ•ŸÑŸâ ${API_BASE_URL}/",
          file: "frontend/lib/api.ts"
        },
        {
          problem: "ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖÿ™ÿ≥ÿßŸáŸÑ ÿ¨ÿØÿßŸã",
          solution: "ÿØŸÖÿ¨ Gemini AI ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ÿßŸÑÿ∞ŸÉŸä + Judge0 ŸÑŸÑÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿ≠ŸÇŸäŸÇŸä",
          file: "backend/apps/portfolio/views.py"
        },
        {
          problem: "ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØŸàÿ±ÿßÿ™ ŸÖŸÜ Django Admin",
          solution: "ÿ•ŸÜÿ¥ÿßÿ° ÿµŸÅÿ≠ÿßÿ™ frontend ŸÖÿÆÿµÿµÿ© ŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØŸàÿ±ÿßÿ™/ÿßŸÑŸÅŸäÿØŸäŸàŸáÿßÿ™/ÿßŸÑÿ™ŸÖÿßÿ±ŸäŸÜ",
          file: "frontend/app/admin/academy/"
        },
        {
          problem: "ÿ£ÿÆÿ∑ÿßÿ° TypeScript ŸÅŸä Monaco Editor",
          solution: "ÿßÿ≥ÿ™Ÿäÿ±ÿßÿØ ÿØŸäŸÜÿßŸÖŸäŸÉŸä ŸÖÿπ ÿ™ÿπÿ∑ŸäŸÑ SSR ŸàŸÉÿ™ÿßÿ®ÿ© ÿµÿ±Ÿäÿ≠ÿ© ŸÑŸÑŸÖÿπÿßŸÑÿ¨ÿßÿ™",
          file: "frontend/app/academy/courses/[id]/exercise/[itemId]/page.tsx"
        },
        {
          problem: "ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ™ŸÖÿßÿ±ŸäŸÜ ÿßŸÑŸÖŸÉÿ™ŸÖŸÑÿ©",
          solution: "ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÑÿßŸÖÿßÿ™ already_completed Ÿà current_answer_incorrect ŸÅŸä API",
          file: "backend/apps/portfolio/views.py - AcademyExerciseViewSet"
        }
      ]
    },
    
    usage: {
      title: " ÿØŸÑŸäŸÑ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ",
      installation: {
        title: "ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™",
        steps: [
          "ÿßÿ≥ÿ™ŸÜÿ≥ÿßÿÆ ÿßŸÑŸÖÿ≥ÿ™ŸàÿØÿπ",
          "ÿ•ŸÜÿ¥ÿßÿ° ÿ®Ÿäÿ¶ÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©: python -m venv venv",
          "ÿ™ŸÅÿπŸäŸÑ: .\\venv\\Scripts\\activate (Windows)",
          "ÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿÆŸÑŸÅŸäÿ©: pip install -r requirements.txt",
          "ÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©: cd frontend && npm install",
          "ÿßŸÑÿ™ÿ±ÿ≠ŸäŸÑÿßÿ™: python manage.py migrate",
          "ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ™ŸÖŸäÿ≤: python manage.py createsuperuser",
          "ÿ•ÿ∑ŸÑÿßŸÇ: .\\RECONSTRUIRE_TOUT.bat"
        ]
      },
      development: {
        title: "ÿßŸÑÿ™ÿ∑ŸàŸäÿ±",
        steps: [
          "ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿÆŸÑŸÅŸäÿ©: cd backend && python manage.py runserver",
          "ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©: cd frontend && npm run dev",
          "ÿßŸÑŸàÿµŸàŸÑ: http://localhost:3000",
          "ÿßŸÑÿ•ÿØÿßÿ±ÿ©: http://localhost:3000/admin",
          "API: http://localhost:8000/api"
        ]
      },
      gemini: {
        title: "ÿ™ŸÉŸàŸäŸÜ Gemini AI",
        steps: [
          "ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖŸÅÿ™ÿßÿ≠ API: https://makersuite.google.com/app/apikey",
          "Windows: set GEMINI_API_KEY=your_key",
          "Linux/Mac: export GEMINI_API_KEY=your_key",
          "ÿ•ÿπÿßÿØÿ© ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿÆŸÑŸÅŸäÿ©"
        ]
      }
    },
    
    api: {
      title: " ŸÖÿ±ÿ¨ÿπ API",
      endpoints: [
        { method: "GET", path: "/api/posts/", desc: "ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖŸÇÿßŸÑÿßÿ™" },
        { method: "POST", path: "/api/posts/", desc: "ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÇÿßŸÑ (ŸÑŸÑŸÖŸàÿ∏ŸÅŸäŸÜ ŸÅŸÇÿ∑)" },
        { method: "GET", path: "/api/posts/{id}/", desc: "ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÖŸÇÿßŸÑ" },
        { method: "GET", path: "/academy/courses/", desc: "ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿØŸàÿ±ÿßÿ™" },
        { method: "POST", path: "/academy/courses/", desc: "ÿ•ŸÜÿ¥ÿßÿ° ÿØŸàÿ±ÿ© (ŸÑŸÑŸÖŸàÿ∏ŸÅŸäŸÜ ŸÅŸÇÿ∑)" },
        { method: "GET", path: "/academy/exercises/{id}/", desc: "ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ™ŸÖÿ±ŸäŸÜ" },
        { method: "POST", path: "/academy/exercises/{id}/execute/", desc: "ÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑŸÉŸàÿØ (Judge0)" },
        { method: "POST", path: "/academy/exercises/{id}/submit/", desc: "ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ≠ŸÑ (Gemini)" },
        { method: "GET", path: "/academy/exercises/{id}/solution/", desc: "ÿπÿ±ÿ∂ ÿßŸÑÿ≠ŸÑ" },
        { method: "GET", path: "/academy/progress/", desc: "ÿ™ŸÇÿØŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ" },
      ]
    }
  }
};

export default function DocsPage() {
  const [lang, setLang] = useState<Language>('fr');
  const [activeSection, setActiveSection] = useState('overview');
  
  const t = content[lang];

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
      <div className="container-custom py-12">
        
        {/* Header with Language Selector */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-12">
          <div>
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4">
              {t.title}
            </h1>
            <p className="text-xl text-gray-600 dark:text-gray-300">
              {t.subtitle}
            </p>
          </div>
          
          {/* Language Selector */}
          <div className="flex gap-2">
            <button
              onClick={() => setLang('fr')}
              className={`px-4 py-2 rounded-lg font-medium transition ${
                lang === 'fr' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              üá´üá∑ FR
            </button>
            <button
              onClick={() => setLang('en')}
              className={`px-4 py-2 rounded-lg font-medium transition ${
                lang === 'en' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              üá¨üáß EN
            </button>
            <button
              onClick={() => setLang('ar')}
              className={`px-4 py-2 rounded-lg font-medium transition ${
                lang === 'ar' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              üá∏üá¶ AR
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          
          {/* Sidebar Navigation */}
          <div className="lg:col-span-1">
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 sticky top-24">
              <nav className="space-y-2">
                {Object.entries(t.nav).map(([key, label]) => (
                  <button
                    key={key}
                    onClick={() => setActiveSection(key)}
                    className={`w-full text-left px-4 py-3 rounded-lg font-medium transition ${
                      activeSection === key
                        ? 'bg-blue-500 text-white'
                        : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                    }`}
                  >
                    {label}
                  </button>
                ))}
              </nav>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3 space-y-8" dir={lang === 'ar' ? 'rtl' : 'ltr'}>
            
            {/* Overview Section */}
            {activeSection === 'overview' && (
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
                  {t.overview.title}
                </h2>
                <p className="text-lg text-gray-600 dark:text-gray-300 mb-8">
                  {t.overview.description}
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {t.overview.stats.map((stat, idx) => (
                    <div key={idx} className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900 dark:to-blue-800 rounded-lg p-6 text-center">
                      <div className="text-4xl text-blue-500 dark:text-blue-300 mb-2 flex justify-center">
                        {stat.icon}
                      </div>
                      <div className="text-3xl font-bold text-gray-900 dark:text-white mb-1">
                        {stat.value}
                      </div>
                      <div className="text-gray-600 dark:text-gray-300">
                        {stat.label}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* About Section */}
            {activeSection === 'about' && (
              <div className="space-y-6">
                {/* Header */}
                <div className="bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/30 dark:to-blue-900/30 rounded-xl shadow-lg p-8">
                  <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                    {t.about.title}
                  </h2>
                  <p className="text-lg text-gray-600 dark:text-gray-300">
                    {t.about.subtitle}
                  </p>
                </div>

                {/* Mission */}
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                    {t.about.mission.title}
                  </h3>
                  <p className="text-lg text-gray-600 dark:text-gray-300 mb-6">
                    {t.about.mission.description}
                  </p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
                    {t.about.mission.goals.map((goal, idx) => (
                      <div key={idx} className="bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg p-6">
                        <div className="text-3xl text-blue-500 dark:text-blue-400 mb-3 flex justify-center">
                          {goal.icon}
                        </div>
                        <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-2 text-center">
                          {goal.title}
                        </h4>
                        <p className="text-gray-600 dark:text-gray-400 text-center">
                          {goal.desc}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Story */}
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                    {t.about.story.title}
                  </h3>
                  <div className="space-y-4">
                    {t.about.story.paragraphs.map((paragraph, idx) => (
                      <p key={idx} className="text-lg text-gray-600 dark:text-gray-300 leading-relaxed">
                        {paragraph}
                      </p>
                    ))}
                  </div>
                </div>

                {/* Values */}
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                    {t.about.values.title}
                  </h3>
                  <ul className="space-y-3">
                    {t.about.values.items.map((item, idx) => (
                      <li key={idx} className="flex items-start gap-3 text-gray-700 dark:text-gray-300 text-lg">
                        <span className="mt-1">‚Ä¢</span>
                        <span>{item}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Impact */}
                <div className="bg-gradient-to-br from-green-50 to-blue-50 dark:from-green-900/30 dark:to-blue-900/30 rounded-xl shadow-lg p-8">
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                    {t.about.impact.title}
                  </h3>
                  <p className="text-lg text-gray-600 dark:text-gray-300 mb-4">
                    {t.about.impact.description}
                  </p>
                  <ul className="space-y-3">
                    {t.about.impact.points.map((point, idx) => (
                      <li key={idx} className="flex items-start gap-3 text-gray-700 dark:text-gray-300 text-lg">
                        <FiCheckCircle className="text-green-500 mt-1 flex-shrink-0" />
                        <span>{point}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}

            {/* Dynamic Management Section */}
            {activeSection === 'dynamic' && (
              <div className="space-y-6">
                {/* Header */}
                <div className="bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/30 dark:to-emerald-900/30 rounded-xl shadow-lg p-8">
                  <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                    {t.dynamic.title}
                  </h2>
                  <p className="text-lg text-gray-600 dark:text-gray-300 mb-4">
                    {t.dynamic.subtitle}
                  </p>
                  <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                    {t.dynamic.intro}
                  </p>
                </div>

                {/* Management Sections */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {t.dynamic.sections.map((section, idx) => (
                    <div key={idx} className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow">
                      <div className="text-4xl mb-4">{section.icon}</div>
                      <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-4">
                        {section.title}
                      </h3>
                      <ul className="space-y-2">
                        {section.features.map((feature, fidx) => (
                          <li key={fidx} className="flex items-start gap-2 text-gray-600 dark:text-gray-400">
                            <FiCheckCircle className="text-green-500 mt-1 flex-shrink-0" />
                            <span>{feature}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>

                {/* Advantages */}
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
                    {t.dynamic.advantages.title}
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {t.dynamic.advantages.items.map((item, idx) => (
                      <div key={idx} className="bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg p-6">
                        <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                          {item.title}
                        </h4>
                        <p className="text-gray-600 dark:text-gray-400 text-sm">
                          {item.desc}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* How to use */}
                <div className="bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/30 dark:to-cyan-900/30 rounded-xl shadow-lg p-8">
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
                    {t.dynamic.howto.title}
                  </h3>
                  <div className="space-y-3">
                    {t.dynamic.howto.steps.map((step, idx) => (
                      <div key={idx} className="flex items-start gap-4 text-gray-700 dark:text-gray-300">
                        <span className="font-mono text-blue-500 dark:text-blue-400 font-bold">
                          {step.split('.')[0]}.
                        </span>
                        <span>{step.split('. ')[1]}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Technologies Section */}
            {activeSection === 'technologies' && (
              <div className="space-y-6">
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                  <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
                    {t.technologies.title}
                  </h2>
                  
                  {/* Backend */}
                  <div className="mb-8">
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
                      <FiServer className="text-green-500" />
                      {t.technologies.backend.title}
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {t.technologies.backend.items.map((item, idx) => (
                        <div key={idx} className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                          <div className="font-semibold text-gray-900 dark:text-white mb-1">
                            {item.name}
                          </div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">
                            {item.desc}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  {/* Frontend */}
                  <div>
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
                      <FiMonitor className="text-blue-500" />
                      {t.technologies.frontend.title}
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {t.technologies.frontend.items.map((item, idx) => (
                        <div key={idx} className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                          <div className="font-semibold text-gray-900 dark:text-white mb-1">
                            {item.name}
                          </div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">
                            {item.desc}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Features Section */}
            {activeSection === 'features' && (
              <div className="space-y-6">
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                  <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
                    {t.features.title}
                  </h2>
                  
                  {/* Portfolio Features */}
                  <div className="mb-8">
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4">
                      üìÅ {t.features.portfolio.title}
                    </h3>
                    <ul className="space-y-2">
                      {t.features.portfolio.items.map((item, idx) => (
                        <li key={idx} className="flex items-start gap-3 text-gray-700 dark:text-gray-300">
                          <FiCheckCircle className="text-green-500 mt-1 flex-shrink-0" />
                          <span>{item}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  {/* Blog Features */}
                  <div className="mb-8">
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4">
                      ‚úçÔ∏è {t.features.blog.title}
                    </h3>
                    <ul className="space-y-2">
                      {t.features.blog.items.map((item, idx) => (
                        <li key={idx} className="flex items-start gap-3 text-gray-700 dark:text-gray-300">
                          <FiCheckCircle className="text-green-500 mt-1 flex-shrink-0" />
                          <span>{item}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  {/* Academy Features */}
                  <div>
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4">
                      üéì {t.features.academy.title}
                    </h3>
                    <ul className="space-y-2">
                      {t.features.academy.items.map((item, idx) => (
                        <li key={idx} className="flex items-start gap-3 text-gray-700 dark:text-gray-300">
                          <FiCheckCircle className="text-green-500 mt-1 flex-shrink-0" />
                          <span>{item}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            )}

            {/* Problems & Solutions Section */}
            {activeSection === 'problems' && (
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
                  {t.problems.title}
                </h2>
                
                <div className="space-y-6">
                  {t.problems.items.map((item, idx) => (
                    <div key={idx} className="border-l-4 border-orange-500 bg-orange-50 dark:bg-orange-900/20 rounded-r-lg p-6">
                      <div className="flex items-start gap-3 mb-3">
                        <FiAlertCircle className="text-orange-500 text-xl mt-1 flex-shrink-0" />
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                            {item.problem}
                          </h3>
                          <div className="flex items-start gap-2 text-green-700 dark:text-green-400 mb-2">
                            <FiCheckCircle className="mt-1 flex-shrink-0" />
                            <p>{item.solution}</p>
                          </div>
                          <code className="text-sm bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded text-gray-700 dark:text-gray-300">
                            {item.file}
                          </code>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Usage Section */}
            {activeSection === 'usage' && (
              <div className="space-y-6">
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                  <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
                    {t.usage.title}
                  </h2>
                  
                  {/* Installation */}
                  <div className="mb-8">
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4">
                      ‚öôÔ∏è {t.usage.installation.title}
                    </h3>
                    <ol className="space-y-3">
                      {t.usage.installation.steps.map((step, idx) => (
                        <li key={idx} className="flex gap-3 text-gray-700 dark:text-gray-300">
                          <span className="font-bold text-blue-500">{idx + 1}.</span>
                          <code className="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded flex-1">
                            {step}
                          </code>
                        </li>
                      ))}
                    </ol>
                  </div>
                  
                  {/* Development */}
                  <div className="mb-8">
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4">
                      üíª {t.usage.development.title}
                    </h3>
                    <ol className="space-y-3">
                      {t.usage.development.steps.map((step, idx) => (
                        <li key={idx} className="flex gap-3 text-gray-700 dark:text-gray-300">
                          <span className="font-bold text-blue-500">{idx + 1}.</span>
                          <code className="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded flex-1">
                            {step}
                          </code>
                        </li>
                      ))}
                    </ol>
                  </div>
                  
                  {/* Gemini Config */}
                  <div>
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4">
                      ü§ñ {t.usage.gemini.title}
                    </h3>
                    <ol className="space-y-3">
                      {t.usage.gemini.steps.map((step, idx) => (
                        <li key={idx} className="flex gap-3 text-gray-700 dark:text-gray-300">
                          <span className="font-bold text-blue-500">{idx + 1}.</span>
                          <code className="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded flex-1">
                            {step}
                          </code>
                        </li>
                      ))}
                    </ol>
                  </div>
                </div>
              </div>
            )}

            {/* API Section */}
            {activeSection === 'api' && (
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8">
                <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
                  {t.api.title}
                </h2>
                
                <div className="space-y-4">
                  {t.api.endpoints.map((endpoint, idx) => (
                    <div key={idx} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                      <div className="flex items-center gap-3 mb-2">
                        <span className={`px-3 py-1 rounded text-sm font-semibold ${
                          endpoint.method === 'GET' 
                            ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'
                            : 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300'
                        }`}>
                          {endpoint.method}
                        </span>
                        <code className="text-gray-900 dark:text-white font-mono">
                          {endpoint.path}
                        </code>
                      </div>
                      <p className="text-gray-600 dark:text-gray-400 text-sm">
                        {endpoint.desc}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            )}

          </div>
        </div>
      </div>
    </div>
  );
}

